Reverse a String:,"['def', 'reverse_string', '(', ')', ':', 'return', '[', ':', ':-1', ']']"
Check if a String is a Palindrome:,"['def', 'is_palindrome', '(', ')', ':', 'return', '==', '[', ':', ':-1', ']']"
Find the Factorial of a Number,"['def', 'factorial', '(', 'n', ')', ':', 'n', '==', '0', 'n', '==', '1', ':', 'return', '1', 'else', ':', 'return', 'n', '*', 'factorial', '(', 'n-1', ')']"
Check for Prime Numbers:,"['def', 'is_prime', '(', 'num', ')', ':', 'num', '<', '2', ':', 'return', 'False', 'range', '(', '2', ',', 'int', '(', 'num', '*', '*', '0.5', ')', '+', '1', ')', ':', 'num', '%', '==', '0', ':', 'return', 'False', 'return', 'True']"
Implement a Linked List:,"['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self.data', '=', 'data', 'self.next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self.head', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'new_node', '=', 'Node', '(', 'data', ')', 'self.head', ':', 'self.head', '=', 'new_node', 'else', ':', 'current', '=', 'self.head', 'current.next', ':', 'current', '=', 'current.next', 'current.next', '=', 'new_node']"
Count Words in a Sentence:,"['def', 'count_words', '(', 'sentence', ')', ':', 'words', '=', 'sentence.split', '(', ')', 'return', 'len', '(', 'words', ')']"
Find the Maximum Subarray Sum,"['def', 'max_subarray_sum', '(', 'arr', ')', ':', 'max_sum', '=', 'current_sum', '=', 'arr', '[', '0', ']', 'num', 'arr', '[', '1', ':', ']', ':', 'current_sum', '=', 'max', '(', 'num', ',', 'current_sum', '+', 'num', ')', 'max_sum', '=', 'max', '(', 'max_sum', ',', 'current_sum', ')', 'return', 'max_sum']"
Implement a Stack:,"['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self.items', '=', '[', ']', 'def', 'push', '(', 'self', ',', 'item', ')', ':', 'self.items.append', '(', 'item', ')', 'def', 'pop', '(', 'self', ')', ':', 'self.is_empty', '(', ')', ':', 'return', 'self.items.pop', '(', ')', 'def', 'peek', '(', 'self', ')', ':', 'self.is_empty', '(', ')', ':', 'return', 'self.items', '[', '-1', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'len', '(', 'self.items', ')', '==', '0']"
Determine if Two Strings are Anagrams:,"['def', 'are_anagrams', '(', 'str1', ',', 'str2', ')', ':', 'return', 'sorted', '(', 'str1', ')', '==', 'sorted', '(', 'str2', ')']"
Rotate a Matrix,"['def', 'rotate_matrix', '(', 'matrix', ')', ':', 'n', '=', 'len', '(', 'matrix', ')', 'range', '(', 'n', '//', '2', ')', ':', 'j', 'range', '(', ',', 'n', '-', '-', '1', ')', ':', 'temp', '=', 'matrix', '[', ']', '[', 'j', ']', 'matrix', '[', ']', '[', 'j', ']', '=', 'matrix', '[', 'n', '-', 'j', '-', '1', ']', '[', ']', 'matrix', '[', 'n', '-', 'j', '-', '1', ']', '[', ']', '=', 'matrix', '[', 'n', '-', '-', '1', ']', '[', 'n', '-', 'j', '-', '1', ']', 'matrix', '[', 'n', '-', '-', '1', ']', '[', 'n', '-', 'j', '-', '1', ']', '=', 'matrix', '[', 'j', ']', '[', 'n', '-', '-', '1', ']', 'matrix', '[', 'j', ']', '[', 'n', '-', '-', '1', ']', '=', 'temp']"
10.Rotate a Matrix:,"['def', 'rotate_matrix', '(', 'matrix', ')', ':', 'n', '=', 'len', '(', 'matrix', ')', 'range', '(', 'n', '//', '2', ')', ':', 'j', 'range', '(', ',', 'n', '-', '-', '1', ')', ':', 'temp', '=', 'matrix', '[', ']', '[', 'j', ']', 'matrix', '[', ']', '[', 'j', ']', '=', 'matrix', '[', 'n', '-', 'j', '-', '1', ']', '[', ']', 'matrix', '[', 'n', '-', 'j', '-', '1', ']', '[', ']', '=', 'matrix', '[', 'n', '-', '-', '1', ']', '[', 'n', '-', 'j', '-', '1', ']', 'matrix', '[', 'n', '-', '-', '1', ']', '[', 'n', '-', 'j', '-', '1', ']', '=', 'matrix', '[', 'j', ']', '[', 'n', '-', '-', '1', ']', 'matrix', '[', 'j', ']', '[', 'n', '-', '-', '1', ']', '=', 'temp']"
add two numbers,"['a=10', 'b=10', 'c=a+b', 'print', '(', 'c', ')']"
add 2 numbers,"['a=2', 'b=4', 'c=a+b', 'print', '(', '``', 'c', ""''"", ')']"
Write a program to print even length words in a string,"['def', 'printWords', '(', ')', ':', '#', 'split', 'string', '=', 's.split', '(', ""'"", ""'"", ')', '#', 'iterate', 'words', 'string', 'word', ':', '#', 'length', 'even', 'len', '(', 'word', ')', '%', '2==0', ':', 'print', '(', 'word', ')', '#', 'Driver', 'Code', '=', '``', 'muskan', ""''"", 'printWords', '(', ')']"
