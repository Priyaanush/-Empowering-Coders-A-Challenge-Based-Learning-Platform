Reverse a String:,"['#', 'include', '<', 'stdio.h', '>', '#', 'include', '<', 'string.h', '>', 'void', 'reverseString', '(', 'char', 'str', '[', ']', ')', '{', 'int', 'length', '=', 'strlen', '(', 'str', ')', ';', '(', 'int', '=', '0', ';', '<', 'length', '/', '2', ';', 'i++', ')', '{', 'char', 'temp', '=', 'str', '[', ']', ';', 'str', '[', ']', '=', 'str', '[', 'length', '-', '-', '1', ']', ';', 'str', '[', 'length', '-', '-', '1', ']', '=', 'temp', ';', '}', '}', 'int', 'main', '(', ')', '{', 'char', 'str', '[', ']', '=', '``', 'Hello', ',', 'World', '!', '``', ';', 'reverseString', '(', 'str', ')', ';', 'printf', '(', '``', '%', 's\\n', ""''"", ',', 'str', ')', ';', 'return', '0', ';', '}']"
Swap Two Numbers without using a Temporary Variable:,"['#', 'include', '<', 'stdio.h', '>', 'void', 'swapNumbers', '(', 'int', '*', ',', 'int', '*', 'b', ')', '{', '*', '=', '*', '+', '*', 'b', ';', '*', 'b', '=', '*', '-', '*', 'b', ';', '*', '=', '*', '-', '*', 'b', ';', '}', 'int', 'main', '(', ')', '{', 'int', 'x', '=', '5', ',', '=', '10', ';', 'swapNumbers', '(', '&', 'x', ',', '&', ')', ';', 'printf', '(', '``', 'swapping', ':', 'x', '=', '%', ',', '=', '%', 'd\\n', ""''"", ',', 'x', ',', ')', ';', 'return', '0', ';', '}']"
 Find Factorial of a Number:,"['#', 'include', '<', 'stdio.h', '>', 'int', 'factorial', '(', 'int', 'n', ')', '{', '(', 'n', '==', '0', '||', 'n', '==', '1', ')', '{', 'return', '1', ';', '}', 'else', '{', 'return', 'n', '*', 'factorial', '(', 'n', '-', '1', ')', ';', '}', '}', 'int', 'main', '(', ')', '{', 'int', 'num', '=', '5', ';', 'printf', '(', '``', 'Factorial', '%', '%', 'd\\n', ""''"", ',', 'num', ',', 'factorial', '(', 'num', ')', ')', ';', 'return', '0', ';', '}']"
Check for Palindrome:,"['#', 'include', '<', 'stdio.h', '>', '#', 'include', '<', 'string.h', '>', 'int', 'isPalindrome', '(', 'char', 'str', '[', ']', ')', '{', 'int', 'length', '=', 'strlen', '(', 'str', ')', ';', '(', 'int', '=', '0', ';', '<', 'length', '/', '2', ';', 'i++', ')', '{', '(', 'str', '[', ']', '!', '=', 'str', '[', 'length', '-', '-', '1', ']', ')', '{', 'return', '0', ';', '//', 'palindrome', '}', '}', 'return', '1', ';', '//', 'Palindrome', '}', 'int', 'main', '(', ')', '{', 'char', 'testString', '[', ']', '=', '``', 'radar', ""''"", ';', '(', 'isPalindrome', '(', 'testString', ')', ')', '{', 'printf', '(', '``', 'Palindrome\\n', ""''"", ')', ';', '}', 'else', '{', 'printf', '(', '``', 'palindrome\\n', ""''"", ')', ';', '}', 'return', '0', ';', '}']"
implement a Linked List:,"['#', 'include', '<', 'stdio.h', '>', '#', 'include', '<', 'stdlib.h', '>', 'struct', 'Node', '{', 'int', 'data', ';', 'struct', 'Node', '*', 'next', ';', '}', ';', 'void', 'append', '(', 'struct', 'Node', '*', '*', 'head', ',', 'int', 'data', ')', '{', 'struct', 'Node', '*', 'newNode', '=', '(', 'struct', 'Node', '*', ')', 'malloc', '(', 'sizeof', '(', 'struct', 'Node', ')', ')', ';', 'newNode-', '>', 'data', '=', 'data', ';', 'newNode-', '>', 'next', '=', 'NULL', ';', '(', '*', 'head', '==', 'NULL', ')', '{', '*', 'head', '=', 'newNode', ';', '}', 'else', '{', 'struct', 'Node', '*', 'current', '=', '*', 'head', ';', '(', 'current-', '>', 'next', '!', '=', 'NULL', ')', '{', 'current', '=', 'current-', '>', 'next', ';', '}', 'current-', '>', 'next', '=', 'newNode', ';', '}', '}', 'int', 'main', '(', ')', '{', 'struct', 'Node', '*', 'linkedList', '=', 'NULL', ';', 'append', '(', '&', 'linkedList', ',', '1', ')', ';', 'append', '(', '&', 'linkedList', ',', '2', ')', ';', 'return', '0', ';', '}']"
Find the Largest Element in an Array:,"['#', 'include', '<', 'stdio.h', '>', 'int', 'findLargestElement', '(', 'int', 'arr', '[', ']', ',', 'int', 'size', ')', '{', 'int', 'largest', '=', 'arr', '[', '0', ']', ';', '(', 'int', '=', '1', ';', '<', 'size', ';', 'i++', ')', '{', '(', 'arr', '[', ']', '>', 'largest', ')', '{', 'largest', '=', 'arr', '[', ']', ';', '}', '}', 'return', 'largest', ';', '}', 'int', 'main', '(', ')', '{', 'int', 'array', '[', ']', '=', '{', '3', ',', '8', ',', '1', ',', '5', ',', '12', ',', '7', '}', ';', 'int', 'size', '=', 'sizeof', '(', 'array', ')', '/', 'sizeof', '(', 'array', '[', '0', ']', ')', ';', 'printf', '(', '``', 'Largest', 'element', 'array', ':', '%', 'd\\n', ""''"", ',', 'findLargestElement', '(', 'array', ',', 'size', ')', ')', ';', 'return', '0', ';', '}']"
Check for Prime Numbers:,"['#', 'include', '<', 'stdio.h', '>', 'int', 'isPrime', '(', 'int', 'num', ')', '{', '(', 'num', '<', '2', ')', '{', 'return', '0', ';', '//', 'prime', 'number', '}', '(', 'int', '=', '2', ';', '*', '<', '=', 'num', ';', 'i++', ')', '{', '(', 'num', '%', '==', '0', ')', '{', 'return', '0', ';', '//', 'prime', 'number', '}', '}', 'return', '1', ';', '//', 'Prime', 'number', '}', 'int', 'main', '(', ')', '{', 'int', 'number', '=', '11', ';', '(', 'isPrime', '(', 'number', ')', ')', '{', 'printf', '(', '``', '%', 'prime', 'number\\n', ""''"", ',', 'number', ')', ';', '}', 'else', '{', 'printf', '(', '``', '%', 'prime', 'number\\n', ""''"", ',', 'number', ')', ';', '}', 'return', '0', ';', '}']"
Implement a Queue using Arrays:,"['#', 'include', '<', 'stdio.h', '>', '#', 'include', '<', 'stdlib.h', '>', '#', 'define', 'MAX_SIZE', '10', 'struct', 'Queue', '{', 'int', 'items', '[', 'MAX_SIZE', ']', ';', 'int', 'front', ',', 'rear', ';', '}', ';', 'void', 'enqueue', '(', 'struct', 'Queue', '*', 'q', ',', 'int', 'value', ')', '{', '(', 'q-', '>', 'rear', '==', 'MAX_SIZE', '-', '1', ')', '{', 'printf', '(', '``', 'Queue', 'full\\n', ""''"", ')', ';', 'return', ';', '}', 'q-', '>', 'items', '[', '++', '(', 'q-', '>', 'rear', ')', ']', '=', 'value', ';', '}', 'int', 'dequeue', '(', 'struct', 'Queue', '*', 'q', ')', '{', '(', 'q-', '>', 'front', '>', 'q-', '>', 'rear', ')', '{', 'printf', '(', '``', 'Queue', 'empty\\n', ""''"", ')', ';', 'return', '-1', ';', '}', 'return', 'q-', '>', 'items', '[', '(', 'q-', '>', 'front', ')', '++', ']', ';', '}', 'int', 'main', '(', ')', '{', 'struct', 'Queue', 'myQueue', ';', 'myQueue.front', '=', '0', ';', 'myQueue.rear', '=', '-1', ';', 'enqueue', '(', '&', 'myQueue', ',', '1', ')', ';', 'enqueue', '(', '&', 'myQueue', ',', '2', ')', ';', 'printf', '(', '``', 'Dequeued', ':', '%', 'd\\n', ""''"", ',', 'dequeue', '(', '&', 'myQueue', ')', ')', ';', 'printf', '(', '``', 'Dequeued', ':', '%', 'd\\n', ""''"", ',', 'dequeue', '(', '&', 'myQueue', ')', ')', ';', 'return', '0', ';', '}']"
Calculate Fibonacci Series:,"['#', 'include', '<', 'stdio.h', '>', 'int', 'fibonacci', '(', 'int', 'n', ')', '{', '(', 'n', '<', '=', '1', ')', '{', 'return', 'n', ';', '}', 'return', 'fibonacci', '(', 'n', '-', '1', ')', '+', 'fibonacci', '(', 'n', '-', '2', ')', ';', '}', 'int', 'main', '(', ')', '{', 'int', 'n', '=', '5', ';', 'printf', '(', '``', 'Fibonacci', 'Series', '%', 'terms', ':', '\\n', ""''"", ',', 'n', ')', ';', '(', 'int', '=', '0', ';', '<', 'n', ';', 'i++', ')', '{', 'printf', '(', '``', '%', '``', ',', 'fibonacci', '(', ')', ')', ';', '}', 'printf', '(', '``', '\\n', ""''"", ')', ';', 'return', '0', ';', '}']"
 Write a program in C to display the first 10 natural numbers,"['#', 'include', '<', 'stdio.h', '>', 'int', 'main', '(', ')', '{', 'int', ';', 'printf', '(', '``', 'first', '10', 'natural', 'numbers', ':', '\\n', ""''"", ')', ';', '(', '=', '1', ';', '<', '=', '10', ';', 'i++', ')', '{', 'printf', '(', '``', '%', '``', ',', ')', ';', '}', 'return', '0', ';', '}']"
