Reverse a String,"['public', 'class', 'ReverseString', '{', 'public', 'static', 'String', 'reverseString', '(', 'String', 'str', ')', '{', 'return', 'new', 'StringBuilder', '(', 'str', ')', '.reverse', '(', ')', '.toString', '(', ')', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'String', 'originalString', '=', '``', 'Hello', ',', 'World', '!', '``', ';', 'String', 'reversedString', '=', 'reverseString', '(', 'originalString', ')', ';', 'System.out.println', '(', 'reversedString', ')', ';', '}', '}']"
Check if a String is a Palindrome:,"['public', 'class', 'PalindromeCheck', '{', 'public', 'static', 'boolean', 'isPalindrome', '(', 'String', 'str', ')', '{', 'String', 'reversed', '=', 'new', 'StringBuilder', '(', 'str', ')', '.reverse', '(', ')', '.toString', '(', ')', ';', 'return', 'str.equals', '(', 'reversed', ')', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'String', 'testString', '=', '``', 'radar', ""''"", ';', 'System.out.println', '(', 'isPalindrome', '(', 'testString', ')', ')', ';', '}', '}']"
Find the Factorial of a Number:,"['public', 'class', 'Factorial', '{', 'public', 'static', 'long', 'factorial', '(', 'int', 'n', ')', '{', '(', 'n', '==', '0', '||', 'n', '==', '1', ')', '{', 'return', '1', ';', '}', 'else', '{', 'return', 'n', '*', 'factorial', '(', 'n', '-', '1', ')', ';', '}', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'int', 'num', '=', '5', ';', 'System.out.println', '(', 'factorial', '(', 'num', ')', ')', ';', '}', '}']"
Check for Prime Numbers:,"['public', 'class', 'PrimeCheck', '{', 'public', 'static', 'boolean', 'isPrime', '(', 'int', 'num', ')', '{', '(', 'num', '<', '2', ')', '{', 'return', 'false', ';', '}', '(', 'int', '=', '2', ';', '<', '=', 'Math.sqrt', '(', 'num', ')', ';', 'i++', ')', '{', '(', 'num', '%', '==', '0', ')', '{', 'return', 'false', ';', '}', '}', 'return', 'true', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'int', 'number', '=', '11', ';', 'System.out.println', '(', 'isPrime', '(', 'number', ')', ')', ';', '}', '}']"
implement a Linked List:,"['class', 'Node', '{', 'int', 'data', ';', 'Node', 'next', ';', 'public', 'Node', '(', 'int', 'data', ')', '{', 'this.data', '=', 'data', ';', 'this.next', '=', 'null', ';', '}', '}', 'public', 'class', 'LinkedList', '{', 'Node', 'head', ';', 'public', 'void', 'append', '(', 'int', 'data', ')', '{', 'Node', 'newNode', '=', 'new', 'Node', '(', 'data', ')', ';', '(', 'head', '==', 'null', ')', '{', 'head', '=', 'newNode', ';', 'return', ';', '}', 'Node', 'current', '=', 'head', ';', '(', 'current.next', '!', '=', 'null', ')', '{', 'current', '=', 'current.next', ';', '}', 'current.next', '=', 'newNode', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'LinkedList', 'linkedList', '=', 'new', 'LinkedList', '(', ')', ';', 'linkedList.append', '(', '1', ')', ';', 'linkedList.append', '(', '2', ')', ';', '}', '}']"
Implement a Stack:,"['import', 'java.util.Stack', ';', 'public', 'class', 'CustomStack', '{', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'Stack', '<', 'Integer', '>', 'stack', '=', 'new', 'Stack', '<', '>', '(', ')', ';', 'stack.push', '(', '1', ')', ';', 'stack.push', '(', '2', ')', ';', 'System.out.println', '(', 'stack.pop', '(', ')', ')', ';', '//', 'Output', ':', '2', 'System.out.println', '(', 'stack.peek', '(', ')', ')', ';', '//', 'Output', ':', '1', '}', '}']"
Determine if Two Strings are Anagrams:,"['import', 'java.util.Arrays', ';', 'public', 'class', 'AnagramCheck', '{', 'public', 'static', 'boolean', 'areAnagrams', '(', 'String', 'str1', ',', 'String', 'str2', ')', '{', 'char', '[', ']', 'charArray1', '=', 'str1.toCharArray', '(', ')', ';', 'char', '[', ']', 'charArray2', '=', 'str2.toCharArray', '(', ')', ';', 'Arrays.sort', '(', 'charArray1', ')', ';', 'Arrays.sort', '(', 'charArray2', ')', ';', 'return', 'Arrays.equals', '(', 'charArray1', ',', 'charArray2', ')', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'String', 'word1', '=', '``', 'listen', ""''"", ';', 'String', 'word2', '=', '``', 'silent', ""''"", ';', 'System.out.println', '(', 'areAnagrams', '(', 'word1', ',', 'word2', ')', ')', ';', '//', 'Output', ':', 'true', '}', '}']"
Rotate a Matrix:,"['public', 'class', 'MatrixRotation', '{', 'public', 'static', 'void', 'rotateMatrix', '(', 'int', '[', ']', '[', ']', 'matrix', ')', '{', 'int', 'n', '=', 'matrix.length', ';', '(', 'int', '=', '0', ';', '<', 'n', '/', '2', ';', 'i++', ')', '{', '(', 'int', 'j', '=', ';', 'j', '<', 'n', '-', '-', '1', ';', 'j++', ')', '{', 'int', 'temp', '=', 'matrix', '[', ']', '[', 'j', ']', ';', 'matrix', '[', ']', '[', 'j', ']', '=', 'matrix', '[', 'n', '-', 'j', '-', '1', ']', '[', ']', ';', 'matrix', '[', 'n', '-', 'j', '-', '1', ']', '[', ']', '=', 'matrix', '[', 'n', '-', '-', '1', ']', '[', 'n', '-', 'j', '-', '1', ']', ';', 'matrix', '[', 'n', '-', '-', '1', ']', '[', 'n', '-', 'j', '-', '1', ']', '=', 'matrix', '[', 'j', ']', '[', 'n', '-', '-', '1', ']', ';', 'matrix', '[', 'j', ']', '[', 'n', '-', '-', '1', ']', '=', 'temp', ';', '}', '}', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'int', '[', ']', '[', ']', 'matrix', '=', '{', '{', '1', ',', '2', ',', '3', '}', ',', '{', '4', ',', '5', ',', '6', '}', ',', '{', '7', ',', '8', ',', '9', '}', '}', ';', 'rotateMatrix', '(', 'matrix', ')', ';', '(', 'int', '[', ']', 'row', ':', 'matrix', ')', '{', 'System.out.println', '(', 'Arrays.toString', '(', 'row', ')', ')', ';', '}', '}', '}']"
Implement a Queue using Two Stacks:,"['import', 'java.util.Stack', ';', 'public', 'class', 'QueueWithTwoStacks', '{', 'Stack', '<', 'Integer', '>', 'stack1', '=', 'new', 'Stack', '<', '>', '(', ')', ';', 'Stack', '<', 'Integer', '>', 'stack2', '=', 'new', 'Stack', '<', '>', '(', ')', ';', 'public', 'void', 'enqueue', '(', 'int', 'item', ')', '{', 'stack1.push', '(', 'item', ')', ';', '}', 'public', 'int', 'dequeue', '(', ')', '{', '(', 'stack2.isEmpty', '(', ')', ')', '{', '(', 'stack1.isEmpty', '(', ')', ')', '{', 'throw', 'new', 'IllegalStateException', '(', '``', 'Queue', 'empty', ""''"", ')', ';', '}', '(', '!', 'stack1.isEmpty', '(', ')', ')', '{', 'stack2.push', '(', 'stack1.pop', '(', ')', ')', ';', '}', '}', 'return', 'stack2.pop', '(', ')', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'QueueWithTwoStacks', 'queue', '=', 'new', 'QueueWithTwoStacks', '(', ')', ';', 'queue.enqueue', '(', '1', ')', ';', 'queue.enqueue', '(', '2', ')', ';', 'System.out.println', '(', 'queue.dequeue', '(', ')', ')', ';', '//', 'Output', ':', '1', 'System.out.println', '(', 'queue.dequeue', '(', ')', ')', ';', '//', 'Output', ':', '2', '}', '}']"
